install.packages('tidyverse')
library('usethis')
git_sitrep()
gitcreds_set()
library('gitcreds')
gitcreds_set()
install.packages("spotifyr")
devtools::install_github('charlie86/spotifyr')
#### Workspace setup ####
library(spotifyr)
library(tidyverse)
# Authenticate using Spotify API credentials stored in .Renviron
Sys.getenv("SPOTIFY_CLIENT_ID")
Sys.getenv("SPOTIFY_CLIENT_SECRET")
# Download data
radiohead_data <- get_artist_audio_features('radiohead')
the_national_data <- get_artist_audio_features('the national')
coldplay_data <- get_artist_audio_features('coldplay')
# Ensure 'track_preview_url' exists and rename it to 'preview_link'
if ("track_preview_url" %in% colnames(radiohead_data)) {
radiohead_data <- dplyr::rename(radiohead_data, preview_link = track_preview_url)
}
if ("track_preview_url" %in% colnames(the_national_data)) {
the_national_data <- dplyr::rename(the_national_data, preview_link = track_preview_url)
}
if ("track_preview_url" %in% colnames(coldplay_data)) {
coldplay_data <- dplyr::rename(coldplay_data, preview_link = track_preview_url)
}
# Save the data
write_csv(radiohead_data, "data/raw_data/raw_data_radiohead.csv")
write_csv(the_national_data, "data/raw_data/raw_data_the_national.csv")
write_csv(coldplay_data, "data/raw_data/raw_data_coldplay.csv")
#### Workspace setup ####
library(tidyverse)
### Helper Functions ####
# calculate the mean of a column
calculate_column_mean <- function(data, column_name) {
# Extract the specified column as a vector
column_data <- data %>%
pull({{ column_name }})  # Use curly-curly to handle non-standard evaluation of the column name
# Remove the first value from the column vector
column_data <- column_data[-1]
# Calculate the mean of the remaining values, ignoring NA
column_mean <- mean(column_data, na.rm = TRUE)
# Return the result
return(column_mean)
}
#### Clean data ####
raw_data_coldplay <- read_csv("data/raw_data/raw_data_coldplay.csv")
raw_data_radiohead <- read_csv("data/raw_data/raw_data_radiohead.csv")
raw_data_national <- read_csv("data/raw_data/raw_data_the_national.csv")
# Coldplay's means
coldplay_dance_mean <- calculate_column_mean(raw_data_coldplay, danceability)
coldplay_energy_mean <- calculate_column_mean(raw_data_coldplay, energy)
coldplay_loudness_mean <- calculate_column_mean(raw_data_coldplay, loudness)
# Radiohead's means
radiohead_dance_mean <- calculate_column_mean(raw_data_radiohead, danceability)
radiohead_energy_mean <- calculate_column_mean(raw_data_radiohead, energy)
radiohead_loudness_mean <- calculate_column_mean(raw_data_radiohead, loudness)
# The National's means
national_dance_mean <- calculate_column_mean(raw_data_national, danceability)
national_energy_mean <- calculate_column_mean(raw_data_national, energy)
national_loudness_mean <- calculate_column_mean(raw_data_national, loudness)
music_data <- data.frame(
Band = c("Coldplay", "Radiohead", "The National"),
Danceability = c(coldplay_dance_mean, radiohead_dance_mean, national_dance_mean),
Energy = c(coldplay_energy_mean, radiohead_energy_mean, national_energy_mean),
Loudness = c(coldplay_loudness_mean, radiohead_loudness_mean, national_loudness_mean)
)
#### Save data ####
write_csv(music_data, here::here("data/analysis_data/music_data.csv"))
#### Workspace setup ####
library(tidyverse)
library(ggplot2)
#### Simulate data ####
set.seed(304)
num_days <- 10
start_date <- as.Date("2023-01-01")
dates <- seq(start_date, by = "day", length.out = num_days)
marriage_licenses <- rpois(num_days, lambda = 10)
#### Workspace setup ####
library(spotifyr)
library(tidyverse)
# Authenticate using Spotify API credentials stored in .Renviron
Sys.getenv("SPOTIFY_CLIENT_ID")
Sys.getenv("SPOTIFY_CLIENT_SECRET")
# Download data
radiohead_data <- get_artist_audio_features('radiohead')
the_national_data <- get_artist_audio_features('the national')
coldplay_data <- get_artist_audio_features('coldplay')
# Ensure 'track_preview_url' exists and rename it to 'preview_link'
if ("track_preview_url" %in% colnames(radiohead_data)) {
radiohead_data <- dplyr::rename(radiohead_data, preview_link = track_preview_url)
}
if ("track_preview_url" %in% colnames(the_national_data)) {
the_national_data <- dplyr::rename(the_national_data, preview_link = track_preview_url)
}
if ("track_preview_url" %in% colnames(coldplay_data)) {
coldplay_data <- dplyr::rename(coldplay_data, preview_link = track_preview_url)
}
# Save the data
write_csv(radiohead_data, "data/raw_data/raw_data_radiohead.csv")
write_csv(the_national_data, "data/raw_data/raw_data_the_national.csv")
write_csv(coldplay_data, "data/raw_data/raw_data_coldplay.csv")
#### Workspace setup ####
library(tidyverse)
### Helper Functions ####
# calculate the mean of a column
calculate_column_mean <- function(data, column_name) {
# Extract the specified column as a vector
column_data <- data %>%
pull({{ column_name }})  # Use curly-curly to handle non-standard evaluation of the column name
# Remove the first value from the column vector
column_data <- column_data[-1]
# Calculate the mean of the remaining values, ignoring NA
column_mean <- mean(column_data, na.rm = TRUE)
# Return the result
return(column_mean)
}
#### Clean data ####
raw_data_coldplay <- read_csv("data/raw_data/raw_data_coldplay.csv")
raw_data_radiohead <- read_csv("data/raw_data/raw_data_radiohead.csv")
raw_data_national <- read_csv("data/raw_data/raw_data_the_national.csv")
# Coldplay's means
coldplay_dance_mean <- calculate_column_mean(raw_data_coldplay, danceability)
coldplay_energy_mean <- calculate_column_mean(raw_data_coldplay, energy)
coldplay_loudness_mean <- calculate_column_mean(raw_data_coldplay, loudness)
# Radiohead's means
radiohead_dance_mean <- calculate_column_mean(raw_data_radiohead, danceability)
radiohead_energy_mean <- calculate_column_mean(raw_data_radiohead, energy)
radiohead_loudness_mean <- calculate_column_mean(raw_data_radiohead, loudness)
# The National's means
national_dance_mean <- calculate_column_mean(raw_data_national, danceability)
national_energy_mean <- calculate_column_mean(raw_data_national, energy)
national_loudness_mean <- calculate_column_mean(raw_data_national, loudness)
music_data <- data.frame(
Band = c("Coldplay", "Radiohead", "The National"),
Danceability = c(coldplay_dance_mean, radiohead_dance_mean, national_dance_mean),
Energy = c(coldplay_energy_mean, radiohead_energy_mean, national_energy_mean),
Loudness = c(coldplay_loudness_mean, radiohead_loudness_mean, national_loudness_mean)
)
#### Save data ####
write_csv(music_data, here::here("data/analysis_data/music_data.csv"))
#| label: fig-data-summary
#| fig-cap: Data summary of audio features for Coldplay
#| echo: false
#| warning: false
#| message: false
# Load necessary libraries
library(ggplot2)
library(here)
library(dplyr)
# Load the data
music <- read.csv(here::here("data/analysis_data/music_data.csv"))
# bar plot
ggplot(music, aes(x = Band, y = Energy, fill = as.factor(Energy))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Energy",
x = "Band",
y = "Energy",
fill = "Band") +
theme_minimal() +
scale_fill_grey(start = 0.8, end = 0.2) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5),
legend.position = "top"
)
#| label: fig-data-summary
#| fig-cap: Data summary of audio features for Coldplay
#| echo: false
#| warning: false
#| message: false
# Load necessary libraries
library(ggplot2)
library(here)
library(dplyr)
# Load the data
music <- read.csv(here::here("data/analysis_data/music_data.csv"))
# bar plot
ggplot(music, aes(x = Band, y = Energy, fill = as.factor(Energy))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Energy",
x = "Band",
y = "Energy",
fill = "Band") +
theme_minimal() +
scale_fill_grey(start = 0.8, end = 0.2) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5),
legend.position = "top"
)
#| label: fig-danceability
#| fig-cap: Average Danceability for Coldplay, Radiohead, and The National
#| echo: false
#| warning: false
#| message: false
#| label: fig-data-summary
#| fig-cap: Data summary of audio features for Coldplay
#| echo: false
#| warning: false
#| message: false
# Load necessary libraries
library(ggplot2)
library(here)
library(dplyr)
# Load the data
music <- read.csv(here::here("data/analysis_data/music_data.csv"))
# bar plot
ggplot(music, aes(x = Band, y = Energy, fill = as.factor(Energy))) +
geom_bar(stat = "identity", position = "dodge") +
labs(title = "Energy",
x = "Band",
y = "Energy",
fill = "Band") +
theme_minimal() +
scale_fill_grey(start = 0.8, end = 0.2) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(hjust = 0.5),
legend.position = "top"
)
